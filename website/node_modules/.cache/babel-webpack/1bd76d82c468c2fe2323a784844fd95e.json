{"ast":null,"code":"import { ComponentFactoryResolver, Directive, ElementRef, EventEmitter, forwardRef, Injector, Input, NgZone, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject, fromEvent } from 'rxjs';\nimport { positionElements } from '../util/positioning';\nimport { NgbTypeaheadWindow } from './typeahead-window';\nimport { PopupService } from '../util/popup';\nimport { toString, isDefined } from '../util/util';\nimport { Key } from '../util/key';\nimport { Live } from '../util/accessibility/live';\nimport { NgbTypeaheadConfig } from './typeahead-config';\nimport { map, switchMap, tap } from 'rxjs/operators';\nvar NGB_TYPEAHEAD_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(function () {\n    return NgbTypeahead;\n  }),\n  multi: true\n};\nvar nextWindowId = 0;\n/**\n * NgbTypeahead directive provides a simple way of creating powerful typeaheads from any text input\n */\n\nvar NgbTypeahead =\n/** @class */\nfunction () {\n  function NgbTypeahead(_elementRef, _viewContainerRef, _renderer, _injector, componentFactoryResolver, config, ngZone, _live) {\n    var _this = this;\n\n    this._elementRef = _elementRef;\n    this._viewContainerRef = _viewContainerRef;\n    this._renderer = _renderer;\n    this._injector = _injector;\n    this._live = _live;\n    /**\n       * Value for the configurable autocomplete attribute.\n       * Defaults to 'off' to disable the native browser autocomplete, but this standard value does not seem\n       * to be always correctly taken into account.\n       *\n       * @since 2.1.0\n       */\n\n    this.autocomplete = 'off';\n    /** Placement of a typeahead accepts:\n       *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n       *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n       * and array of above values.\n      */\n\n    this.placement = 'bottom-left';\n    /**\n       * An event emitted when a match is selected. Event payload is of type NgbTypeaheadSelectItemEvent.\n       */\n\n    this.selectItem = new EventEmitter();\n    this.popupId = \"ngb-typeahead-\" + nextWindowId++;\n\n    this._onTouched = function () {};\n\n    this._onChange = function (_) {};\n\n    this.container = config.container;\n    this.editable = config.editable;\n    this.focusFirst = config.focusFirst;\n    this.showHint = config.showHint;\n    this.placement = config.placement;\n    this._valueChanges = fromEvent(_elementRef.nativeElement, 'input').pipe(map(function ($event) {\n      return $event.target.value;\n    }));\n    this._resubscribeTypeahead = new BehaviorSubject(null);\n    this._popupService = new PopupService(NgbTypeaheadWindow, _injector, _viewContainerRef, _renderer, componentFactoryResolver);\n    this._zoneSubscription = ngZone.onStable.subscribe(function () {\n      if (_this.isPopupOpen()) {\n        positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');\n      }\n    });\n  }\n\n  NgbTypeahead.prototype.ngOnInit = function () {\n    var _this = this;\n\n    var inputValues$ = this._valueChanges.pipe(tap(function (value) {\n      _this._inputValueBackup = value;\n\n      if (_this.editable) {\n        _this._onChange(value);\n      }\n    }));\n\n    var results$ = inputValues$.pipe(this.ngbTypeahead);\n    var processedResults$ = results$.pipe(tap(function () {\n      if (!_this.editable) {\n        _this._onChange(undefined);\n      }\n    }));\n\n    var userInput$ = this._resubscribeTypeahead.pipe(switchMap(function () {\n      return processedResults$;\n    }));\n\n    this._subscription = this._subscribeToUserInput(userInput$);\n  };\n\n  NgbTypeahead.prototype.ngOnDestroy = function () {\n    this._closePopup();\n\n    this._unsubscribeFromUserInput();\n\n    this._zoneSubscription.unsubscribe();\n  };\n\n  NgbTypeahead.prototype.registerOnChange = function (fn) {\n    this._onChange = fn;\n  };\n\n  NgbTypeahead.prototype.registerOnTouched = function (fn) {\n    this._onTouched = fn;\n  };\n\n  NgbTypeahead.prototype.writeValue = function (value) {\n    this._writeInputValue(this._formatItemForInput(value));\n  };\n\n  NgbTypeahead.prototype.setDisabledState = function (isDisabled) {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  };\n\n  NgbTypeahead.prototype.onDocumentClick = function (event) {\n    if (event.target !== this._elementRef.nativeElement) {\n      this.dismissPopup();\n    }\n  };\n  /**\n   * Dismisses typeahead popup window\n   */\n\n  /**\n     * Dismisses typeahead popup window\n     */\n\n\n  NgbTypeahead.prototype.dismissPopup =\n  /**\n  * Dismisses typeahead popup window\n  */\n  function () {\n    if (this.isPopupOpen()) {\n      this._closePopup();\n\n      this._writeInputValue(this._inputValueBackup);\n    }\n  };\n  /**\n   * Returns true if the typeahead popup window is displayed\n   */\n\n  /**\n     * Returns true if the typeahead popup window is displayed\n     */\n\n\n  NgbTypeahead.prototype.isPopupOpen =\n  /**\n  * Returns true if the typeahead popup window is displayed\n  */\n  function () {\n    return this._windowRef != null;\n  };\n\n  NgbTypeahead.prototype.handleBlur = function () {\n    this._resubscribeTypeahead.next(null);\n\n    this._onTouched();\n  };\n\n  NgbTypeahead.prototype.handleKeyDown = function (event) {\n    if (!this.isPopupOpen()) {\n      return;\n    }\n\n    if (Key[toString(event.which)]) {\n      switch (event.which) {\n        case Key.ArrowDown:\n          event.preventDefault();\n\n          this._windowRef.instance.next();\n\n          this._showHint();\n\n          break;\n\n        case Key.ArrowUp:\n          event.preventDefault();\n\n          this._windowRef.instance.prev();\n\n          this._showHint();\n\n          break;\n\n        case Key.Enter:\n        case Key.Tab:\n          var result = this._windowRef.instance.getActive();\n\n          if (isDefined(result)) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            this._selectResult(result);\n          }\n\n          this._closePopup();\n\n          break;\n\n        case Key.Escape:\n          event.preventDefault();\n\n          this._resubscribeTypeahead.next(null);\n\n          this.dismissPopup();\n          break;\n      }\n    }\n  };\n\n  NgbTypeahead.prototype._openPopup = function () {\n    var _this = this;\n\n    if (!this.isPopupOpen()) {\n      this._inputValueBackup = this._elementRef.nativeElement.value;\n      this._windowRef = this._popupService.open();\n      this._windowRef.instance.id = this.popupId;\n\n      this._windowRef.instance.selectEvent.subscribe(function (result) {\n        return _this._selectResultClosePopup(result);\n      });\n\n      this._windowRef.instance.activeChangeEvent.subscribe(function (activeId) {\n        return _this.activeDescendant = activeId;\n      });\n\n      if (this.container === 'body') {\n        window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n      }\n    }\n  };\n\n  NgbTypeahead.prototype._closePopup = function () {\n    this._popupService.close();\n\n    this._windowRef = null;\n    this.activeDescendant = undefined;\n  };\n\n  NgbTypeahead.prototype._selectResult = function (result) {\n    var defaultPrevented = false;\n    this.selectItem.emit({\n      item: result,\n      preventDefault: function () {\n        defaultPrevented = true;\n      }\n    });\n\n    this._resubscribeTypeahead.next(null);\n\n    if (!defaultPrevented) {\n      this.writeValue(result);\n\n      this._onChange(result);\n    }\n  };\n\n  NgbTypeahead.prototype._selectResultClosePopup = function (result) {\n    this._selectResult(result);\n\n    this._closePopup();\n  };\n\n  NgbTypeahead.prototype._showHint = function () {\n    if (this.showHint && this._windowRef.instance.hasActive() && this._inputValueBackup != null) {\n      var userInputLowerCase = this._inputValueBackup.toLowerCase();\n\n      var formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());\n\n      if (userInputLowerCase === formattedVal.substr(0, this._inputValueBackup.length).toLowerCase()) {\n        this._writeInputValue(this._inputValueBackup + formattedVal.substr(this._inputValueBackup.length));\n\n        this._elementRef.nativeElement['setSelectionRange'].apply(this._elementRef.nativeElement, [this._inputValueBackup.length, formattedVal.length]);\n      } else {\n        this.writeValue(this._windowRef.instance.getActive());\n      }\n    }\n  };\n\n  NgbTypeahead.prototype._formatItemForInput = function (item) {\n    return item != null && this.inputFormatter ? this.inputFormatter(item) : toString(item);\n  };\n\n  NgbTypeahead.prototype._writeInputValue = function (value) {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value', toString(value));\n  };\n\n  NgbTypeahead.prototype._subscribeToUserInput = function (userInput$) {\n    var _this = this;\n\n    return userInput$.subscribe(function (results) {\n      if (!results || results.length === 0) {\n        _this._closePopup();\n      } else {\n        _this._openPopup();\n\n        _this._windowRef.instance.focusFirst = _this.focusFirst;\n        _this._windowRef.instance.results = results;\n        _this._windowRef.instance.term = _this._elementRef.nativeElement.value;\n\n        if (_this.resultFormatter) {\n          _this._windowRef.instance.formatter = _this.resultFormatter;\n        }\n\n        if (_this.resultTemplate) {\n          _this._windowRef.instance.resultTemplate = _this.resultTemplate;\n        }\n\n        _this._windowRef.instance.resetActive(); // The observable stream we are subscribing to might have async steps\n        // and if a component containing typeahead is using the OnPush strategy\n        // the change detection turn wouldn't be invoked automatically.\n        // The observable stream we are subscribing to might have async steps\n        // and if a component containing typeahead is using the OnPush strategy\n        // the change detection turn wouldn't be invoked automatically.\n\n\n        _this._windowRef.changeDetectorRef.detectChanges();\n\n        _this._showHint();\n      } // live announcer\n\n\n      var count = results ? results.length : 0;\n\n      _this._live.say(count === 0 ? 'No results available' : count + \" result\" + (count === 1 ? '' : 's') + \" available\");\n    });\n  };\n\n  NgbTypeahead.prototype._unsubscribeFromUserInput = function () {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n\n    this._subscription = null;\n  };\n\n  NgbTypeahead.decorators = [{\n    type: Directive,\n    args: [{\n      selector: 'input[ngbTypeahead]',\n      exportAs: 'ngbTypeahead',\n      host: {\n        '(blur)': 'handleBlur()',\n        '[class.open]': 'isPopupOpen()',\n        '(document:click)': 'onDocumentClick($event)',\n        '(keydown)': 'handleKeyDown($event)',\n        '[autocomplete]': 'autocomplete',\n        'autocapitalize': 'off',\n        'autocorrect': 'off',\n        'role': 'combobox',\n        'aria-multiline': 'false',\n        '[attr.aria-autocomplete]': 'showHint ? \"both\" : \"list\"',\n        '[attr.aria-activedescendant]': 'activeDescendant',\n        '[attr.aria-owns]': 'isPopupOpen() ? popupId : null',\n        '[attr.aria-expanded]': 'isPopupOpen()'\n      },\n      providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]\n    }]\n  }];\n  /** @nocollapse */\n\n  NgbTypeahead.ctorParameters = function () {\n    return [{\n      type: ElementRef\n    }, {\n      type: ViewContainerRef\n    }, {\n      type: Renderer2\n    }, {\n      type: Injector\n    }, {\n      type: ComponentFactoryResolver\n    }, {\n      type: NgbTypeaheadConfig\n    }, {\n      type: NgZone\n    }, {\n      type: Live\n    }];\n  };\n\n  NgbTypeahead.propDecorators = {\n    \"autocomplete\": [{\n      type: Input\n    }],\n    \"container\": [{\n      type: Input\n    }],\n    \"editable\": [{\n      type: Input\n    }],\n    \"focusFirst\": [{\n      type: Input\n    }],\n    \"inputFormatter\": [{\n      type: Input\n    }],\n    \"ngbTypeahead\": [{\n      type: Input\n    }],\n    \"resultFormatter\": [{\n      type: Input\n    }],\n    \"resultTemplate\": [{\n      type: Input\n    }],\n    \"showHint\": [{\n      type: Input\n    }],\n    \"placement\": [{\n      type: Input\n    }],\n    \"selectItem\": [{\n      type: Output\n    }]\n  };\n  return NgbTypeahead;\n}();\n\nexport { NgbTypeahead }; //# sourceMappingURL=typeahead.js.map","map":{"version":3,"sources":["/var/www/html/MyApp/QuestLive/node_modules/@ng-bootstrap/ng-bootstrap/typeahead/typeahead.js"],"names":["ComponentFactoryResolver","Directive","ElementRef","EventEmitter","forwardRef","Injector","Input","NgZone","Output","Renderer2","TemplateRef","ViewContainerRef","NG_VALUE_ACCESSOR","BehaviorSubject","fromEvent","positionElements","NgbTypeaheadWindow","PopupService","toString","isDefined","Key","Live","NgbTypeaheadConfig","map","switchMap","tap","NGB_TYPEAHEAD_VALUE_ACCESSOR","provide","useExisting","NgbTypeahead","multi","nextWindowId","_elementRef","_viewContainerRef","_renderer","_injector","componentFactoryResolver","config","ngZone","_live","_this","autocomplete","placement","selectItem","popupId","_onTouched","_onChange","_","container","editable","focusFirst","showHint","_valueChanges","nativeElement","pipe","$event","target","value","_resubscribeTypeahead","_popupService","_zoneSubscription","onStable","subscribe","isPopupOpen","_windowRef","location","prototype","ngOnInit","inputValues$","_inputValueBackup","results$","ngbTypeahead","processedResults$","undefined","userInput$","_subscription","_subscribeToUserInput","ngOnDestroy","_closePopup","_unsubscribeFromUserInput","unsubscribe","registerOnChange","fn","registerOnTouched","writeValue","_writeInputValue","_formatItemForInput","setDisabledState","isDisabled","setProperty","onDocumentClick","event","dismissPopup","handleBlur","next","handleKeyDown","which","ArrowDown","preventDefault","instance","_showHint","ArrowUp","prev","Enter","Tab","result","getActive","stopPropagation","_selectResult","Escape","_openPopup","open","id","selectEvent","_selectResultClosePopup","activeChangeEvent","activeId","activeDescendant","window","document","querySelector","appendChild","close","defaultPrevented","emit","item","hasActive","userInputLowerCase","toLowerCase","formattedVal","substr","length","apply","inputFormatter","results","term","resultFormatter","formatter","resultTemplate","resetActive","changeDetectorRef","detectChanges","count","say","decorators","type","args","selector","exportAs","host","providers","ctorParameters","propDecorators"],"mappings":"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","sourcesContent":["import { ComponentFactoryResolver, Directive, ElementRef, EventEmitter, forwardRef, Injector, Input, NgZone, Output, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject, fromEvent } from 'rxjs';\nimport { positionElements } from '../util/positioning';\nimport { NgbTypeaheadWindow } from './typeahead-window';\nimport { PopupService } from '../util/popup';\nimport { toString, isDefined } from '../util/util';\nimport { Key } from '../util/key';\nimport { Live } from '../util/accessibility/live';\nimport { NgbTypeaheadConfig } from './typeahead-config';\nimport { map, switchMap, tap } from 'rxjs/operators';\nvar NGB_TYPEAHEAD_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return NgbTypeahead; }),\n    multi: true\n};\nvar nextWindowId = 0;\n/**\n * NgbTypeahead directive provides a simple way of creating powerful typeaheads from any text input\n */\nvar NgbTypeahead = /** @class */ (function () {\n    function NgbTypeahead(_elementRef, _viewContainerRef, _renderer, _injector, componentFactoryResolver, config, ngZone, _live) {\n        var _this = this;\n        this._elementRef = _elementRef;\n        this._viewContainerRef = _viewContainerRef;\n        this._renderer = _renderer;\n        this._injector = _injector;\n        this._live = _live;\n        /**\n           * Value for the configurable autocomplete attribute.\n           * Defaults to 'off' to disable the native browser autocomplete, but this standard value does not seem\n           * to be always correctly taken into account.\n           *\n           * @since 2.1.0\n           */\n        this.autocomplete = 'off';\n        /** Placement of a typeahead accepts:\n           *    \"top\", \"top-left\", \"top-right\", \"bottom\", \"bottom-left\", \"bottom-right\",\n           *    \"left\", \"left-top\", \"left-bottom\", \"right\", \"right-top\", \"right-bottom\"\n           * and array of above values.\n          */\n        this.placement = 'bottom-left';\n        /**\n           * An event emitted when a match is selected. Event payload is of type NgbTypeaheadSelectItemEvent.\n           */\n        this.selectItem = new EventEmitter();\n        this.popupId = \"ngb-typeahead-\" + nextWindowId++;\n        this._onTouched = function () { };\n        this._onChange = function (_) { };\n        this.container = config.container;\n        this.editable = config.editable;\n        this.focusFirst = config.focusFirst;\n        this.showHint = config.showHint;\n        this.placement = config.placement;\n        this._valueChanges = fromEvent(_elementRef.nativeElement, 'input')\n            .pipe(map(function ($event) { return $event.target.value; }));\n        this._resubscribeTypeahead = new BehaviorSubject(null);\n        this._popupService = new PopupService(NgbTypeaheadWindow, _injector, _viewContainerRef, _renderer, componentFactoryResolver);\n        this._zoneSubscription = ngZone.onStable.subscribe(function () {\n            if (_this.isPopupOpen()) {\n                positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');\n            }\n        });\n    }\n    NgbTypeahead.prototype.ngOnInit = function () {\n        var _this = this;\n        var inputValues$ = this._valueChanges.pipe(tap(function (value) {\n            _this._inputValueBackup = value;\n            if (_this.editable) {\n                _this._onChange(value);\n            }\n        }));\n        var results$ = inputValues$.pipe(this.ngbTypeahead);\n        var processedResults$ = results$.pipe(tap(function () {\n            if (!_this.editable) {\n                _this._onChange(undefined);\n            }\n        }));\n        var userInput$ = this._resubscribeTypeahead.pipe(switchMap(function () { return processedResults$; }));\n        this._subscription = this._subscribeToUserInput(userInput$);\n    };\n    NgbTypeahead.prototype.ngOnDestroy = function () {\n        this._closePopup();\n        this._unsubscribeFromUserInput();\n        this._zoneSubscription.unsubscribe();\n    };\n    NgbTypeahead.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n    NgbTypeahead.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };\n    NgbTypeahead.prototype.writeValue = function (value) { this._writeInputValue(this._formatItemForInput(value)); };\n    NgbTypeahead.prototype.setDisabledState = function (isDisabled) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n    };\n    NgbTypeahead.prototype.onDocumentClick = function (event) {\n        if (event.target !== this._elementRef.nativeElement) {\n            this.dismissPopup();\n        }\n    };\n    /**\n     * Dismisses typeahead popup window\n     */\n    /**\n       * Dismisses typeahead popup window\n       */\n    NgbTypeahead.prototype.dismissPopup = /**\n       * Dismisses typeahead popup window\n       */\n    function () {\n        if (this.isPopupOpen()) {\n            this._closePopup();\n            this._writeInputValue(this._inputValueBackup);\n        }\n    };\n    /**\n     * Returns true if the typeahead popup window is displayed\n     */\n    /**\n       * Returns true if the typeahead popup window is displayed\n       */\n    NgbTypeahead.prototype.isPopupOpen = /**\n       * Returns true if the typeahead popup window is displayed\n       */\n    function () { return this._windowRef != null; };\n    NgbTypeahead.prototype.handleBlur = function () {\n        this._resubscribeTypeahead.next(null);\n        this._onTouched();\n    };\n    NgbTypeahead.prototype.handleKeyDown = function (event) {\n        if (!this.isPopupOpen()) {\n            return;\n        }\n        if (Key[toString(event.which)]) {\n            switch (event.which) {\n                case Key.ArrowDown:\n                    event.preventDefault();\n                    this._windowRef.instance.next();\n                    this._showHint();\n                    break;\n                case Key.ArrowUp:\n                    event.preventDefault();\n                    this._windowRef.instance.prev();\n                    this._showHint();\n                    break;\n                case Key.Enter:\n                case Key.Tab:\n                    var result = this._windowRef.instance.getActive();\n                    if (isDefined(result)) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        this._selectResult(result);\n                    }\n                    this._closePopup();\n                    break;\n                case Key.Escape:\n                    event.preventDefault();\n                    this._resubscribeTypeahead.next(null);\n                    this.dismissPopup();\n                    break;\n            }\n        }\n    };\n    NgbTypeahead.prototype._openPopup = function () {\n        var _this = this;\n        if (!this.isPopupOpen()) {\n            this._inputValueBackup = this._elementRef.nativeElement.value;\n            this._windowRef = this._popupService.open();\n            this._windowRef.instance.id = this.popupId;\n            this._windowRef.instance.selectEvent.subscribe(function (result) { return _this._selectResultClosePopup(result); });\n            this._windowRef.instance.activeChangeEvent.subscribe(function (activeId) { return _this.activeDescendant = activeId; });\n            if (this.container === 'body') {\n                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);\n            }\n        }\n    };\n    NgbTypeahead.prototype._closePopup = function () {\n        this._popupService.close();\n        this._windowRef = null;\n        this.activeDescendant = undefined;\n    };\n    NgbTypeahead.prototype._selectResult = function (result) {\n        var defaultPrevented = false;\n        this.selectItem.emit({ item: result, preventDefault: function () { defaultPrevented = true; } });\n        this._resubscribeTypeahead.next(null);\n        if (!defaultPrevented) {\n            this.writeValue(result);\n            this._onChange(result);\n        }\n    };\n    NgbTypeahead.prototype._selectResultClosePopup = function (result) {\n        this._selectResult(result);\n        this._closePopup();\n    };\n    NgbTypeahead.prototype._showHint = function () {\n        if (this.showHint && this._windowRef.instance.hasActive() && this._inputValueBackup != null) {\n            var userInputLowerCase = this._inputValueBackup.toLowerCase();\n            var formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());\n            if (userInputLowerCase === formattedVal.substr(0, this._inputValueBackup.length).toLowerCase()) {\n                this._writeInputValue(this._inputValueBackup + formattedVal.substr(this._inputValueBackup.length));\n                this._elementRef.nativeElement['setSelectionRange'].apply(this._elementRef.nativeElement, [this._inputValueBackup.length, formattedVal.length]);\n            }\n            else {\n                this.writeValue(this._windowRef.instance.getActive());\n            }\n        }\n    };\n    NgbTypeahead.prototype._formatItemForInput = function (item) {\n        return item != null && this.inputFormatter ? this.inputFormatter(item) : toString(item);\n    };\n    NgbTypeahead.prototype._writeInputValue = function (value) {\n        this._renderer.setProperty(this._elementRef.nativeElement, 'value', toString(value));\n    };\n    NgbTypeahead.prototype._subscribeToUserInput = function (userInput$) {\n        var _this = this;\n        return userInput$.subscribe(function (results) {\n            if (!results || results.length === 0) {\n                _this._closePopup();\n            }\n            else {\n                _this._openPopup();\n                _this._windowRef.instance.focusFirst = _this.focusFirst;\n                _this._windowRef.instance.results = results;\n                _this._windowRef.instance.term = _this._elementRef.nativeElement.value;\n                if (_this.resultFormatter) {\n                    _this._windowRef.instance.formatter = _this.resultFormatter;\n                }\n                if (_this.resultTemplate) {\n                    _this._windowRef.instance.resultTemplate = _this.resultTemplate;\n                }\n                _this._windowRef.instance.resetActive();\n                // The observable stream we are subscribing to might have async steps\n                // and if a component containing typeahead is using the OnPush strategy\n                // the change detection turn wouldn't be invoked automatically.\n                // The observable stream we are subscribing to might have async steps\n                // and if a component containing typeahead is using the OnPush strategy\n                // the change detection turn wouldn't be invoked automatically.\n                _this._windowRef.changeDetectorRef.detectChanges();\n                _this._showHint();\n            }\n            // live announcer\n            var count = results ? results.length : 0;\n            _this._live.say(count === 0 ? 'No results available' : count + \" result\" + (count === 1 ? '' : 's') + \" available\");\n        });\n    };\n    NgbTypeahead.prototype._unsubscribeFromUserInput = function () {\n        if (this._subscription) {\n            this._subscription.unsubscribe();\n        }\n        this._subscription = null;\n    };\n    NgbTypeahead.decorators = [\n        { type: Directive, args: [{\n                    selector: 'input[ngbTypeahead]',\n                    exportAs: 'ngbTypeahead',\n                    host: {\n                        '(blur)': 'handleBlur()',\n                        '[class.open]': 'isPopupOpen()',\n                        '(document:click)': 'onDocumentClick($event)',\n                        '(keydown)': 'handleKeyDown($event)',\n                        '[autocomplete]': 'autocomplete',\n                        'autocapitalize': 'off',\n                        'autocorrect': 'off',\n                        'role': 'combobox',\n                        'aria-multiline': 'false',\n                        '[attr.aria-autocomplete]': 'showHint ? \"both\" : \"list\"',\n                        '[attr.aria-activedescendant]': 'activeDescendant',\n                        '[attr.aria-owns]': 'isPopupOpen() ? popupId : null',\n                        '[attr.aria-expanded]': 'isPopupOpen()'\n                    },\n                    providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]\n                },] },\n    ];\n    /** @nocollapse */\n    NgbTypeahead.ctorParameters = function () { return [\n        { type: ElementRef, },\n        { type: ViewContainerRef, },\n        { type: Renderer2, },\n        { type: Injector, },\n        { type: ComponentFactoryResolver, },\n        { type: NgbTypeaheadConfig, },\n        { type: NgZone, },\n        { type: Live, },\n    ]; };\n    NgbTypeahead.propDecorators = {\n        \"autocomplete\": [{ type: Input },],\n        \"container\": [{ type: Input },],\n        \"editable\": [{ type: Input },],\n        \"focusFirst\": [{ type: Input },],\n        \"inputFormatter\": [{ type: Input },],\n        \"ngbTypeahead\": [{ type: Input },],\n        \"resultFormatter\": [{ type: Input },],\n        \"resultTemplate\": [{ type: Input },],\n        \"showHint\": [{ type: Input },],\n        \"placement\": [{ type: Input },],\n        \"selectItem\": [{ type: Output },],\n    };\n    return NgbTypeahead;\n}());\nexport { NgbTypeahead };\n//# sourceMappingURL=typeahead.js.map"]},"metadata":{},"sourceType":"module"}